#!/usr/bin/env bash
# See README.md for info on running these tests.

testNpmCi() {
  local log_file cache
  log_file=$(mktemp)
  cache=$(mktmpdir)

  BUILDPACK_LOG_FILE="$log_file" compile "node-14-npm-ci" "$cache"

   # make sure that build scripts are being called
  assertCaptured "heroku-prebuild script"
  assertCaptured "build script"
  assertCaptured "postinstall script"
  assertCapturedSuccess

   # test logging
  assertFileContains "use-npm-ci=true" "$log_file"
  assertFileContains "npm-install-time=" "$log_file"
  assertFileContains "npm-install-memory=" "$log_file"

   # test re-using the cache
  echo "" > "$log_file"
  BUILDPACK_LOG_FILE="$log_file" compile "node-14-npm-ci" "$cache"
  assertCapturedSuccess
}

testNpmCiShrinkwrap() {
  local log_file cache
  log_file=$(mktemp)
  cache=$(mktmpdir)

  BUILDPACK_LOG_FILE="$log_file" compile "node-10-npm-ci-shrinkwrap" "$cache"

   # make sure that build scripts are being called
  assertCaptured "heroku-prebuild script"
  assertCaptured "build script"
  assertCaptured "postinstall script"
  assertCapturedSuccess

   # test logging
  assertFileContains "use-npm-ci=true" "$log_file"
  assertFileContains "npm-install-time=" "$log_file"
  assertFileContains "npm-install-memory=" "$log_file"

   # test re-using the cache
  echo "" > "$log_file"
  BUILDPACK_LOG_FILE="$log_file" compile "node-10-npm-ci-shrinkwrap" "$cache"
  assertCapturedSuccess
}

testNpmCiFallback() {
  local log_file cache
  log_file=$(mktemp)

  # without a lockfile we should use "npm install" instead of "npm ci"
  BUILDPACK_LOG_FILE="$log_file" compile "node-14-npm-ci-no-lockfile"

  assertCapturedSuccess

  # detecting that we shouldn't use npm ci
  assertFileContains "use-npm-ci=false" "$log_file"
  # and ran "npm install"
  assertFileContains "npm-install-time=" "$log_file"
  assertFileContains "npm-install-memory=" "$log_file"
}

testNpmCiDisabled() {
  local cache env_dir log_file
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)
  log_file=$(mktemp)

  echo "true" > $env_dir/USE_NPM_INSTALL

  BUILDPACK_LOG_FILE="$log_file" compile "node-14-npm-ci" $cache $env_dir

  assertFileContains "use-npm-ci=false" "$log_file"
  assertCapturedSuccess
}

testFlatmapStream() {
  compile "flatmap-stream"
  assertCaptured "flatmap-stream module has been removed from the npm registry"
  assertCapturedError
}

testBuildScriptBehavior() {
  # The 'build' script is run by default
  compile "build-script"
  assertCaptured "Running build"
  assertCapturedSuccess

  # the 'heroku-postbuild' script takes precedence over the 'build' script
  compile "build-script-override"
  assertCaptured "Detected both \"build\" and \"heroku-postbuild\" scripts"
  assertCaptured "Running heroku-postbuild"
  assertCapturedSuccess
}

testNgBuildScriptWarning() {
  compile "ng-build-script"
  assertCaptured "\"ng build\" detected as build script. We recommend you use \`ng build --prod\` or add \`--prod\` to your build flags."
}

testBuildScriptYarn() {
  compile "build-script-yarn"
  assertCaptured "Running build (yarn)"
  assertCaptured "build hook message"
  assertCapturedSuccess
}

testBuildFlags() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  echo "--prod --optimize" > $env_dir/NODE_BUILD_FLAGS
  compile "build-script" $cache $env_dir
  assertCaptured "Running build"
  assertCaptured "Running with --prod --optimize flags"
  assertCaptured 'echo build hook message "--prod --optimize"'
  assertCapturedSuccess
}

testBuildFlagsWithYarn() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  echo "--prod --optimize" > $env_dir/NODE_BUILD_FLAGS
  compile "build-script-yarn" $cache $env_dir
  assertCaptured "Running build"
  assertCaptured "Running with --prod --optimize flags"
  assertCaptured "$ echo build hook message '--prod --optimize'"
  assertCapturedSuccess
}

testPreferEmptyHerokuPostbuildOverBuild() {
  compile "empty-heroku-postbuild"
  assertCaptured "Detected both \"build\" and \"heroku-postbuild\" scripts"
  assertCaptured "Running heroku-postbuild"
  assertNotCaptured "build hook message"
  assertCapturedSuccess
}

testEmptyHerokuPostbuildWithYarn() {
  compile "empty-heroku-postbuild-yarn"
  assertCaptured "Running heroku-postbuild (yarn)"
  assertNotCaptured "build hook message"
  assertNotCaptured "Script must exist"
  assertCapturedSuccess
}

testPrePostBuildScripts() {
  compile "pre-post-build-scripts"
  assertCaptured "Running heroku-prebuild"
  assertCaptured "echo heroku-prebuild hook message"
  assertCaptured "Running heroku-postbuild"
  assertCaptured "echo heroku-postbuild hook message"
  assertCapturedSuccess

  compile "stable-node"
  assertNotCaptured "Running heroku-prebuild"
  assertNotCaptured "Running heroku-postbuild"
  assertCapturedSuccess
}

testCleanupScript() {
  compile "cleanup-scripts"
  assertCaptured "Running heroku-cleanup"
  assertCaptured "echo heroku-cleanup hook message"
  assertCapturedSuccess
}

testYarnRun() {
  compile "yarn-run"
  assertCaptured "Running heroku-postbuild (yarn)"
  assertCaptured "foobar"
  assertCapturedSuccess
}

testNoVersion() {
  compile "no-version"
  assertCaptured "engines.node (package.json):  unspecified"
  assertCaptured "Resolving node version 16.x"
  assertCaptured "Downloading and installing node 16."
  assertCapturedSuccess
}

testCustomYarnBinaryURL() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  echo "testurl" > $env_dir/YARN_BINARY_URL
  compile "yarn" $cache $env_dir
  assertCaptured "from testurl"
}

testCustomNodeBinaryURL() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  echo "testurl" > $env_dir/NODE_BINARY_URL
  compile "node-14" $cache $env_dir
  assertCaptured "from testurl"
}

testDisableCache() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  echo "true" > $env_dir/NODE_VERBOSE
  compile "node-modules-cache-1" $cache $env_dir
  assertCaptured "lodash@1.0.0"
  assertEquals "1" "$(ls -1 $cache/node/cache/node_modules | grep -c lodash | tr -d ' ')"
  assertCapturedSuccess

  compile "node-modules-cache-2" $cache $env_dir
  assertCaptured "lodash@1.0.0"
  assertCapturedSuccess

  echo "false" > $env_dir/NODE_MODULES_CACHE
  compile "node-modules-cache-2" $cache $env_dir
  assertCaptured "lodash@1.3.1"
  assertCapturedSuccess
}

testNodeModulesCached() {
  cache=$(mktmpdir)

  compile "caching" $cache
  assertCaptured "- node_modules"
  assertEquals "1" "$(ls -1 $cache/node/cache/node_modules | grep -c express | tr -d ' ')"
  assertCapturedSuccess
}

testSetBuildEnv() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  compile "print-node-options"
  assertCaptured "NODE_OPTIONS=--max_old_space_size=2560"

  echo "--max_old_space_size=1234" > $env_dir/NODE_OPTIONS
  compile "print-node-options" $cache $env_dir
  assertCaptured "NODE_OPTIONS=--max_old_space_size=1234"
}

testYarn() {
  compile "yarn"
  assertCaptured "installing yarn"
  assertCaptured "Installing node modules (yarn.lock)"
  assertNotCaptured "Installing node modules (package.json)"
  assertCapturedSuccess
}

testYarnCache() {
  local cache=$(mktmpdir)

  compile "yarn" $cache

  # assert that devDependencies are cached
  assertEquals "1" "$(ls -1 $cache/node/cache/yarn/v6 | grep -c debug | tr -d ' ')"

  assertCapturedSuccess
}

testYarnNativeCache() {
  local cache=$(mktmpdir)

  compile "yarn-native-cache" $cache
  # These will be created if yarn is using the directory for its cache

  # Run this again with a cache
  compile "yarn-native-cache" $cache

  assertCapturedSuccess
}

testNpm5CacheDirectory() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  local cache_dir=$(mktmpdir)
  echo "${cache_dir}/npm"> "$env_dir"/NPM_CONFIG_CACHE
  compile "npm5" $cache $env_dir
  # These will be created if npm is using the directory for its cache
  assertDirectoryExists ${cache_dir}/npm
  assertDirectoryExists ${cache_dir}/npm/_cacache
  assertCapturedSuccess
}

testBuildWithCache() {
  cache=$(mktmpdir)

  compile "stable-node" $cache
  assertNotCaptured "Restoring cache"
  assertEquals "1" "$(ls -1 $cache/node/cache/node_modules | grep -c @heroku | tr -d ' ')"
  assertCapturedSuccess

  compile "stable-node" $cache
  assertCaptured "- node_modules"
  assertFileContains "${STACK}" "${cache}/node/signature"
  assertCapturedSuccess

  rm -rf "$cache/node/cache/node_modules"
  compile "stable-node" $cache
  assertCaptured "- node_modules (not cached - skipping)"
  assertCapturedSuccess
}

testCacheWithPrebuild() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo 'true' > "$env_dir"/PREBUILD

  compile "cache-prebuild" $cache
  assertCapturedSuccess

  compile "cache-prebuild" $cache $env_dir
  assertCaptured "Cached directories were not restored due to a change in version of node"
  assertCapturedSuccess
}

testYarnSemver() {
  compile "yarn-semver"
  assertCaptured "Resolving yarn version ~0.28"
  assertCaptured "installing yarn (0.28."
  assertCapturedSuccess
}

testOldYarn() {
  compile "yarn-old-deprecated-version"
  assertCaptured "Resolving yarn version ~0.16"
  assertCaptured "installing yarn (0.16."
  assertCaptured "error \`install\` has been replaced with \`add\`"
  assertCaptured "Outdated Yarn version"
  assertCaptured "Your application is specifying a requirement on an old version of Yarn"
  assertCaptured "https://devcenter.heroku.com/articles/nodejs-support#specifying-a-yarn-version"
  assertCapturedError
}

testYarnV1Semver() {
  compile "yarn-v1-semver"
  assertCaptured "Downloading and installing yarn (1."
  assertCaptured "Installed yarn 1."
  assertCapturedSuccess
}

testYarnInvalid() {
  compile "yarn-invalid"
  assertCaptured "Resolving yarn version 0.171"
  assertCaptured "Could not find Yarn version corresponding to version requirement: 0.171"
  assertCaptured "No matching version found for Yarn: 0.171"
  assertCaptured "https://help.heroku.com/8MEL050H"
  assertCapturedError
}

testYarnSemverInvalid() {
  compile "yarn-invalid-semver"
  assertCaptured "Resolving yarn version 0.17q"
  assertCaptured "Error: Invalid semantic version \"0.17q\""
  assertCaptured "Invalid semver requirement"
  assertCaptured "https://help.heroku.com/0ZIOF3ST"
  assertCapturedError
}

testYarnEngine() {
  compile "yarn-engine"
  assertCaptured "installing yarn (1.4.0)"
  assertCapturedSuccess
}

testYarnEngineWithMonorepo() {
  compile "yarn-engine-with-monorepo"
  assertCaptured "installing yarn (1.4.0)"
  assertCapturedSuccess
}

# If they specify a version of yarn inside package.json but
# don't have a yarn.lock file download and make yarn available
# though we will only install using yarn if a yarn.lock exists
testYarnOnlyEngine() {
  compile "yarn-only-engine"
  assertCaptured "installing yarn (1.4.0)"
  assertCapturedSuccess
}

testErrorYarnAndNpmLockfiles() {
  compile "yarn-and-npm-lockfiles"
  assertNotCaptured "Creating runtime environment"
  assertCaptured "Two different lockfiles found: package-lock.json and yarn.lock"
  assertCaptured "Both npm and yarn have created lockfiles"
  assertCaptured "https://help.heroku.com/0KU2EM53"
  assertCapturedError
}

testErrorYarnAndNpmShrinkwrap() {
  compile "yarn-and-shrinkwrap-lockfiles"
  assertNotCaptured "Creating runtime environment"
  assertCaptured "Two different lockfiles found"
  assertCaptured "Please make sure there is only one of the following files"
  assertCaptured "https://help.heroku.com/0KU2EM53"
  assertCapturedError
}

testYarnLockfileOutOfDate() {
  compile "yarn-lockfile-out-of-date"
  assertCaptured "Your lockfile needs to be updated"
  assertCaptured "Outdated Yarn lockfile"
  assertCaptured "https://help.heroku.com/TXYS53YJ"
  assertCapturedError
}

testDefaultToNpm5() {
  compile "npm-lockfile-no-version"
  assertCaptured "Using default npm version"
  assertCaptured "Installing node modules (package.json + package-lock)"
  assertCapturedSuccess
}

testDefaultToNpm5WithNode6() {
  compile "npm-lockfile-node-6-no-version"
  assertCaptured "Detected package-lock.json"
  assertCaptured "Bootstrapping npm 5"
  assertCaptured "Installing node modules (package.json + package-lock)"
  assertCapturedSuccess
}

testOldNpmWithLockfile() {
  compile "npm-lockfile-old-version"
  assertCaptured "This version of npm"
  assertCaptured "https://devcenter.heroku.com/articles/nodejs-support#specifying-an-npm-version"
  assertCapturedSuccess
}

testWarnAwsProxyHttp() {
  env_dir=$(mktmpdir)
  echo "http://localhost:5001" > $env_dir/HTTP_PROXY
  compile "node-14" "$(mktmpdir)" $env_dir
  assertCaptured "Your build may fail if NO_PROXY is not set to amazonaws.com"
  assertCapturedError
}

testWarnAwsProxyHttps() {
  env_dir=$(mktmpdir)
  echo "http://localhost:5001" > $env_dir/HTTPS_PROXY
  compile "node-14" "$(mktmpdir)" $env_dir
  assertCaptured "Your build may fail if NO_PROXY is not set to amazonaws.com"
  assertCapturedError
}

testWarnEconnreset() {
  compile "econnreset-mock"
  assertCaptured "may be related to npm versions"
  assertCapturedError
  compile "no-version"
  assertNotCaptured "may be related to npm versions"
  assertCapturedSuccess
}

testWarnNoStart() {
  compile "no-start"
  assertCaptured "may not specify any way to start"
  assertCapturedSuccess
  compile "no-version"
  assertNotCaptured "may not specify any way to start"
  assertCapturedSuccess
}

testWarnDevDeps() {
  compile "missing-devdeps-1"
  assertCaptured "A module may be missing"
  assertNotCaptured "This module may be specified"
  assertCapturedError
}

testEnvBlacklist() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo 'tr_TR.UTF-8' > "$env_dir"/LANG
  echo 'safeVar' > "$env_dir"/SAFE
  compile "echo-lang" $cache $env_dir
  assertCaptured "safeVar"
  assertNotCaptured "tr_TR.UTF-8"
  assertCapturedSuccess
}

testWarningsOnFailure() {
  compile "many-warnings"
  assertCaptured "troubleshooting-node-deploys"
  assertCaptured "has several known issues"
  assertNotCaptured "please submit a ticket"
  assertCapturedError
}

testDotHerokuCollision() {
  compile "dot-heroku-collision"
  assertCaptured "The directory .heroku could not be created"
  assertCaptured ".heroku file is checked into this project"
  assertNotCaptured "please submit a ticket"
  assertCapturedError

  compile "dot-heroku-collision-2"
  assertCaptured "Build succeeded!"
  assertNotCaptured ".heroku file is checked into this project"
  assertCapturedSuccess
}

testDotHerokuNodeCollision() {
  compile "dot-heroku-node-collision"
  assertCaptured "The directory .heroku/node could not be created"
  assertCaptured ".heroku file is checked into this project"
  assertNotCaptured "please submit a ticket"
  assertCapturedError
}

testMultipleRuns() {
  local compileDir=$(mktmpdir)
  local cacheDir=$(mktmpdir)

  cp -a test/fixtures/stable-node/. ${compileDir}
  compileDir "$compileDir" "$cacheDir"
  assertCapturedSuccess
  compileDir "$compileDir" "$cacheDir"
  assertCapturedSuccess
}

testUntrackedDependencies() {
  compile "missing-grunt"
  assertCaptured "Grunt may not be tracked in package.json"
  assertCapturedError
}

testBadJson() {
  compile "bad-json"
  assertCaptured "Build failed"
  assertCaptured "We're sorry this build is failing"
  assertNotCaptured "Installing binaries"
  assertCapturedError 1 "Unable to parse"
}

testBuildWithUserCacheDirectoriesCamel() {
  cache=$(mktmpdir)

  compile "cache-directories-camel" $cache
  assertCaptured "- non/existent (nothing to cache)"
  assertEquals "1" "$(ls -1 $cache/node/cache/server | grep -c node_modules | tr -d ' ')"
  assertEquals "1" "$(ls -1 $cache/node/cache/client | grep -c node_modules | tr -d ' ')"
  assertCapturedSuccess

  compile "cache-directories-camel" $cache
  assertCaptured "Loading 3 from cacheDirectories"
  assertCaptured "- server/node_modules"
  assertCaptured "- client/node_modules"
  assertCaptured "- non/existent (not cached - skipping)"
  assertCapturedSuccess
}

testConcurrency1X() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=512 capture "$(pwd)"/profile/WEB_CONCURRENCY.sh
  assertCaptured "Detected 512 MB available memory, 512 MB limit per process (WEB_MEMORY)"
  assertCaptured "Recommending WEB_CONCURRENCY=1"
  assertCapturedSuccess
}

testConcurrency2X() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=1024 capture "$(pwd)"/profile/WEB_CONCURRENCY.sh
  assertCaptured "Detected 1024 MB available memory, 512 MB limit per process (WEB_MEMORY)"
  assertCaptured "Recommending WEB_CONCURRENCY=2"
  assertCapturedSuccess
}

testConcurrencyPerformanceM() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=2560 capture "$(pwd)"/profile/WEB_CONCURRENCY.sh
  assertCaptured "Detected 2560 MB available memory, 512 MB limit per process (WEB_MEMORY)"
  assertCaptured "Recommending WEB_CONCURRENCY=5"
  assertCapturedSuccess
}

testConcurrencyPerformanceL() {
   LOG_CONCURRENCY=true MEMORY_AVAILABLE=14336 capture "$(pwd)"/profile/WEB_CONCURRENCY.sh
   assertCaptured "Detected 14336 MB available memory, 512 MB limit per process (WEB_MEMORY)"
   assertCaptured "Recommending WEB_CONCURRENCY=28"
   assertCapturedSuccess
}

testConcurrencyCustomLimit() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=1024 WEB_MEMORY=256 capture "$(pwd)"/profile/WEB_CONCURRENCY.sh
  assertCaptured "Detected 1024 MB available memory, 256 MB limit per process (WEB_MEMORY)"
  assertCaptured "Recommending WEB_CONCURRENCY=4"
  assertCapturedSuccess
}

# When /sys/fs/cgroup/memory/memory.limit_in_bytes lies and gives a ridiculous value
# This happens on Dokku for example
testConcurrencyTooHigh() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=10000000000 capture "$(pwd)"/profile/WEB_CONCURRENCY.sh
  assertCaptured "Could not determine a reasonable value for WEB_CONCURRENCY"
  assertCaptured "Recommending WEB_CONCURRENCY=1"
  assertCapturedSuccess
}

testInvalidNode() {
  compile "invalid-node"
  assertCaptured "Resolving node version 0.11.333"
  assertCaptured "Could not find Node version corresponding to version requirement: 0.11.333"
  assertCaptured "No matching version found for Node: 0.11.333"
  assertCaptured "https://help.heroku.com/6235QYN4"
  assertCapturedError
}

testInvalidNodeSemver() {
  compile "invalid-node-semver"
  assertCaptured "Resolving node version stable"
  assertCaptured "Error: Invalid semantic version \"stable\""
  assertCaptured "Invalid semver requirement"
  assertCapturedError
}

testSignatureInvalidation() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  compile "node-0.12.6" $cache
  assertCaptured "Downloading and installing node 0.12.6"
  assertCapturedSuccess

  compile "node-0.12.7" $cache
  assertCaptured "Downloading and installing node 0.12.7"
  assertCaptured "Cached directories were not restored due to a change in version of node"
  assertCapturedSuccess
}

testModulesCheckedIn() {
  cache=$(mktmpdir)
  compile "modules-checked-in" $cache
  assertCapturedSuccess

  compile "modules-checked-in" $cache
  assertCaptured "Prebuild detected"
  assertCaptured "Rebuilding any native modules"
  assertCaptured "(preinstall script)"
  assertCaptured "Installing any new modules"
  assertCaptured "(postinstall script)"
  assertCapturedSuccess
}

testSkipModulesCheckedIn() {
  env_dir=$(mktmpdir)
  echo "true" > $env_dir/SKIP_NODE_MODULES_CHECK

  compile "skip-modules-checked-in" "$(mktmpdir)" $env_dir

  assertCaptured "Keeping existing node_modules because SKIP_NODE_MODULES_CHECK=true"
  assertNotCaptured "node_modules checked into source"
  assertCapturedSuccess
}

testDetectWithPackageJson() {
  detect "stable-node"
  assertCaptured "Node.js"
  assertCapturedSuccess
}

testDetectWithoutPackageJson() {
  detect "no-package-json"
  assertCapturedError 1 ""
}

testIoJs() {
  compile "iojs"
  assertCaptured "io.js no longer supported"
  assertCapturedError
}

###
# Yarn 2
testYarn2() {
  compile "yarn-2"
  assertCaptured "Running 'yarn install' with yarn.lock"
  assertCaptured "Version 3.9.7" # tsc output
  assertCaptured "Running 'yarn heroku prune'"
  assertCaptured "debug-npm-4.3.2-f0148b6afe-5543570879.zip appears to be unused - removing"
  assertCaptured "ms-npm-2.1.2-ec0c1512ff-9b65fb709b.zip appears to be unused - removing"
  assertCapturedSuccess
}

testYarn2WithYarn2SkipPruningFalse() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/YARN2_SKIP_PRUNING
  compile "yarn-2" "$(mktmpdir)" $env_dir
  assertCaptured "Running 'yarn install' with yarn.lock"
  assertCaptured "Version 3.9.7" # tsc output
  assertCaptured "Running 'yarn heroku prune'"
  assertCaptured "debug-npm-4.3.2-f0148b6afe-5543570879.zip appears to be unused - removing"
  assertCaptured "ms-npm-2.1.2-ec0c1512ff-9b65fb709b.zip appears to be unused - removing"
  assertCapturedSuccess
}

testYarn2WithYarn2SkipPruningTrue() {
  env_dir=$(mktmpdir)
  echo "true" > $env_dir/YARN2_SKIP_PRUNING
  compile "yarn-2" "$(mktmpdir)" $env_dir
  assertCaptured "Running 'yarn install' with yarn.lock"
  assertCaptured "Version 3.9.7" # tsc output
  assertCaptured "Skipping because YARN2_SKIP_PRUNING is 'true'"
  assertNotCaptured "Running 'yarn heroku prune'"
  assertCapturedSuccess
}

testYarn2WithYarnProductionSetCapturesAndReportsError() {
   env_dir=$(mktmpdir)
   echo "false" > $env_dir/YARN_PRODUCTION
   compile "yarn-2" "$(mktmpdir)" $env_dir
   assertCaptured "Legacy Yarn 1.x configuration present"
   assertCapturedError
 }

testYarn2WithNodeModules() {
  compile "yarn-2-with-node-modules"
  assertCaptured "Running 'yarn install' with yarn.lock"
  assertCaptured "Caching build"
  assertCapturedSuccess
}

testYarn2WithoutYarnCache() {
  compile "yarn-2-without-cache"
  assertCapturedSuccess
}

testYarn2WithoutWorkspaceModule() {
  compile "yarn-2-without-workspace-plugin"
  assertCaptured "Running 'yarn heroku prune'"
  assertCapturedSuccess
}
###

###
# Yarn 2 warnings
testYarn2WithEngine() {
  compile "yarn-2-with-engine"
  assertCaptured "You don't need to specify Yarn engine. Heroku will install the latest Yarn 1.x"
  assertCapturedSuccess
}

testYarn2WithNpmrcAndYarnrc() {
  compile "yarn-2-with-invalid-rc-files"
  assertCaptured "There is an existing .npmrc file that will not be used."
  assertCaptured "There is an existing .yarnrc file that will not be used."
  assertCapturedSuccess
}
###

###
# Yarn 2 failures
testYarn2WithoutYarnrcYml() {
  compile "yarn-2-without-yarnrc-yml"
  assertCaptured "The 'yarnrc.yml' file is not found"
  assertCapturedError
}

testYarn2WithoutYarnPath() {
  compile "yarn-2-without-yarn-path"
  assertCaptured "The 'yarnPath' could not be read from the 'yarnrc.yml' file"
  assertCapturedError
}

testYarn2WithoutYarnRelease() {
  compile "yarn-2-without-yarn"
  assertCaptured "Yarn was not found"
  assertCapturedError
}
###

testSpecificVersion() {
  compile "specific-version"
  assertCaptured "Resolving node version"
  assertCaptured "Downloading and installing node 14.15.3"
  assertCaptured "Using default npm version: 6.14.9"
  assertCapturedSuccess
}

testStableVersion() {
  compile "stable-node"
  assertCaptured "Downloading and installing node 0.10."
  assertNotCaptured "We're sorry this build is failing"
  assertCapturedSuccess
}

testUnstableVersion() {
  compile "unstable-version"
  assertCaptured "Resolving node version 0.11.x"
  assertCaptured "Downloading and installing node 0.11."
  assertCapturedSuccess
}

testOldNpm() {
  compile "old-npm"
  assertCaptured "This version of npm (1.2.8000) has several known issues - consider upgrading to the latest release"
  assertNotCaptured "integer expression expected"
  assertCapturedError
}

testNonexistentNpm() {
  compile "nonexistent-npm"
  assertCaptured "Unable to install npm 1.1.65"
  assertCapturedError 1 ""
}

testSameNpm() {
  compile "same-npm"
  assertCaptured "npm 1.4.28 already installed"
  assertCapturedSuccess
}

testNpmVersionRange() {
  compile "npm-version-range"
  assertCaptured "Bootstrapping npm 5.7.x"
  assertCapturedSuccess
}

testNpmVersionSpecific() {
  compile "npm-version-specific"
  assertCaptured "Bootstrapping npm 2.1.11"
  assertNotCaptured "WARNING"
  assertCapturedSuccess
}

testFailingBuild() {
  compile "failing-build"
  assertCaptured "Build failed"
  assertCaptured "We're sorry this build is failing"
  assertNotCaptured "Checking startup method"
  assertCapturedError 1 ""
}

testInfoEmpty() {
  compile "info-empty"
  assertCaptured "engines.node (package.json):  unspecified"
  assertCaptured "engines.npm (package.json):   unspecified"
  assertCaptured "Installing node modules (package.json)"
  assertCapturedSuccess
}

testDangerousRangeStar() {
  compile "dangerous-range-star"
  assertCaptured "Dangerous semver range"
  assertCaptured "Resolving node version *"
  assertCaptured "Downloading and installing node"
  assertCapturedError
}

testDangerousRangeGreaterThan() {
  compile "dangerous-range-greater-than"
  assertCaptured "Dangerous semver range"
  assertCaptured "Resolving node version >0.4"
  assertCaptured "Downloading and installing node"
  assertCapturedError
}

testRangeWithSpace() {
  compile "range-with-space"
  assertCaptured "Resolving node version = 0.8.x"
  assertCaptured "Downloading and installing node"
  assertCapturedSuccess
}

testInvalidDependency() {
  compile "invalid-dependency"
  assertCaptured "npm ERR! 404"
  assertCaptured "troubleshooting-node-deploys"
  assertCaptured "please submit a ticket"
  assertNotCaptured "possible problems"
  assertCapturedError 1 ""
}

testBuildWithUserCacheDirectories() {
  cache=$(mktmpdir)

  compile "cache-directories" $cache
  assertCaptured "Saving 2 cacheDirectories"
  assertEquals "1" "$(ls -1 $cache/node/cache | grep -c bower_components | tr -d ' ')"
  assertEquals "1" "$(ls -1 $cache/node/cache | grep -c node_modules | tr -d ' ')"
  assertCapturedSuccess

  compile "cache-directories" $cache
  assertCaptured "Loading 2 from cacheDirectories"
  assertCaptured "- node_modules"
  assertCaptured "- bower_components"
  assertCapturedSuccess
}

testUserConfig() {
  compile "userconfig"
  assertCaptured "www.google.com"
  assertCaptured "registry error"
  assertCapturedError 1 ""
}

testDefaultProcType() {
  release "stable-node"
  assertCaptured "web: npm start"
  assertCapturedSuccess
}

testDynamicProcfile() {
  compile "dynamic-procfile"
  assertFileContains "web: node index.js customArg" "${compile_dir}/Procfile"
  assertCapturedSuccess
}

testEnvVars() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_PRODUCTION
  echo "true" > $env_dir/USE_NPM_INSTALL
  compile "stable-node" "$(mktmpdir)" $env_dir
  assertCaptured "NPM_CONFIG_PRODUCTION=false"
  assertCaptured "USE_NPM_INSTALL=true"
  assertCapturedSuccess
}

testNonFileEnvVars() {
  export NPM_CONFIG_FOO=bar
  export NPM_CONFIG_PRODUCTION=false
  compile "stable-node"
  assertCaptured "NPM_CONFIG_FOO=bar"
  assertCaptured "NPM_CONFIG_PRODUCTION=false"
  assertCapturedSuccess
  unset NPM_CONFIG_FOO
  unset NPM_CONFIG_PRODUCTION
}

# In the following tests "lodash" is defined as a devDependency
# testing for lodash is equivalent to testing if devDependencies
# were installed

# Default behavior: install devDependencies then prunes them away
testDevDependenciesInstalled() {
  compile "dependencies"
  assertCaptured "lodash"
  assertCaptured "Pruning devDependencies"
  assertCaptured "removed 1 package"
  assertCapturedSuccess
}

# Default behavior: install devDependencies then prunes them away with Yarn
testDevDependenciesInstalledYarn() {
  compile "dependencies-yarn"
  assertCaptured "lodash"
  assertCaptured "Pruning devDependencies"
  assertCapturedSuccess
}

# When NPM_CONFIG_PRODUCTION = false we should not prune the devDependencies
testDevDepenenciesWithNoPruning() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_PRODUCTION
  compile "dependencies" "$(mktmpdir)" $env_dir
  assertCaptured "lodash"
  assertCaptured "Skipping because NPM_CONFIG_PRODUCTION is 'false'"
  assertCapturedSuccess

  env_dir=$(mktmpdir)
  echo "true" > $env_dir/NPM_CONFIG_PRODUCTION
  compile "dependencies" "$(mktmpdir)" $env_dir
  assertNotCaptured "lodash"
  assertCaptured "Skipping because NPM_CONFIG_PRODUCTION is 'true'"
  assertCapturedSuccess
}

# When NPM_CONFIG_PRODUCTION = false we should not prune the devDependencies with Yarn
testDevDepenenciesWithNoPruningYarn() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/YARN_PRODUCTION
  compile "dependencies-yarn" "$(mktmpdir)" $env_dir
  assertCaptured "lodash"
  assertCaptured "Skipping because YARN_PRODUCTION is 'false'"
  assertCapturedSuccess

  env_dir=$(mktmpdir)
  echo "true" > $env_dir/YARN_PRODUCTION
  compile "dependencies-yarn" "$(mktmpdir)" $env_dir
  assertNotCaptured "lodash"
  assertCaptured "Skipping because YARN_PRODUCTION is 'true'"
  assertCapturedSuccess
}

# When NODE_ENV != production we should not prune the devDependencies
testNodeEnvTestDepenencies() {
  env_dir=$(mktmpdir)
  echo "not-production" > $env_dir/NODE_ENV
  compile "dependencies" "$(mktmpdir)" $env_dir
  assertCaptured "lodash"
  assertCaptured "Skipping because NODE_ENV is not 'production'"
  assertCapturedSuccess
}

# When NODE_ENV != production we should not prune the devDependencies with Yarn
testNodeEnvTestDepenenciesYarn() {
  env_dir=$(mktmpdir)
  echo "not-production" > $env_dir/NODE_ENV
  compile "dependencies-yarn" "$(mktmpdir)" $env_dir
  assertCaptured "lodash"
  assertCaptured "Skipping because NODE_ENV is not 'production'"
  assertCapturedSuccess
}

testModulesCheckedInWithDevDependencies() {
  compile "dependencies-modules-checked-in-with-devdependencies"
  assertCaptured "Rebuilding any native modules"
  assertCaptured "lodash"
  assertCaptured "removed 1 package"
  assertCapturedSuccess
}

testModulesCheckedInWithoutDevDependencies() {
  compile "dependencies-modules-checked-in-without-devdependencies"
  assertCaptured "Rebuilding any native modules"
  assertCaptured "added 1 package"
  assertCaptured "lodash"
  assertCaptured "removed 1 package"
  assertCapturedSuccess
}

testOptionalDependencies() {
  env_dir=$(mktmpdir)
  compile "optional-dependencies" "$(mktmpdir)" $env_dir
  assertNotCaptured "NPM_CONFIG_OPTIONAL"
  assertCaptured "less"
  assertCaptured "mime"
  assertCaptured "mkdirp"
  assertCaptured "clean-css"
  assertCaptured "request"
  assertCapturedSuccess
}

testNoOptionalDependencies() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_OPTIONAL
  compile "optional-dependencies" "$(mktmpdir)" $env_dir
  assertCaptured "NPM_CONFIG_OPTIONAL=false"
  assertCaptured "less"
  assertNotCaptured "mime"
  assertNotCaptured "mkdirp"
  assertNotCaptured "clean-css"
  assertNotCaptured "request"
  assertCapturedSuccess
}

testNpmrc() {
  compile "dev-dependencies-npmrc"
  assertCaptured "lodash"
  assertCapturedSuccess
}

testShrinkwrap() {
  compile "shrinkwrap"
  assertCaptured "express@4.10.4"
  assertCaptured "lodash@2.4.0"
  assertCaptured "mocha@2.0.1"
  assertCapturedSuccess
}

testProfileExport() {
  compile "stable-node"
  assertCaptured "Creating runtime environment"
  assertFileContains "export PATH=\"\$HOME/.heroku/node/bin:\$HOME/.heroku/yarn/bin:\$PATH:\$HOME/bin:\$HOME/node_modules/.bin\"" "${compile_dir}/.profile.d/nodejs.sh"
  assertFileContains "export NODE_HOME=\"\$HOME/.heroku/node\"" "${compile_dir}/.profile.d/nodejs.sh"
  assertCapturedSuccess
}

testMultiExport() {
  compile "stable-node"
  assertFileContains "export PATH=" "${bp_dir}/export"
  assertFileContains "/.heroku/node/bin" "${bp_dir}/export"
  assertFileContains "/.heroku/yarn/bin" "${bp_dir}/export"
  assertFileContains "/node_modules/.bin" "${bp_dir}/export"
  assertFileContains "export NODE_HOME=" "${bp_dir}/export"
  assertFileContains "/.heroku/node\"" "${bp_dir}/export"
  assertCapturedSuccess
}

testCIEnvVars() {
  compileTest "ci-env-test"
  assertCaptured "NODE_ENV: test"
  assertCapturedSuccess
}

testCIEnvVarsOverride() {
  env_dir=$(mktmpdir)
  echo "banana" > $env_dir/NODE_ENV

  compileTest "ci-env-test" "$(mktmpdir)" $env_dir

  assertCaptured "NODE_ENV: banana"
  assertCapturedSuccess
}

testCIDependencies() {
  compileTest "ci-dependencies"
  assertCaptured "lodash"
  assertCapturedSuccess
}

testCIDependenciesYarn() {
  compileTest "ci-dependencies-yarn"
  assertCaptured "lodash"
  assertCapturedSuccess
}

testNodeEnv() {
  compile "node-env-consistency"
  assertCaptured "heroku-prebuild: production"
  assertCaptured "preinstall: production"
  assertCaptured "postinstall: production"
  assertCaptured "heroku-postbuild: production"
  assertCapturedSuccess
}

testNodeEnvNpmConfigProductionFalse() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_PRODUCTION
  compile "node-env-consistency" "$(mktmpdir)" $env_dir
  assertCaptured "heroku-prebuild: production"
  assertCaptured "preinstall: production"
  assertCaptured "postinstall: production"
  assertCaptured "heroku-postbuild: production"
  assertCapturedSuccess
}

# Avoid this issue
# https://github.com/npm/npm/issues/17781
testNpmPrune53Issue() {
  compile "npm-prune-5-3-issue"
  assertCaptured "npm 5.3.0 installed"
  assertCaptured "Skipping because npm 5.3.0 fails"
  assertCaptured "https://github.com/npm/npm/issues/17781"
  assertCapturedSuccess
}

# Avoid this issue for users with git dependencies
# https://github.com/npm/npm/issues/19356
testNpmPrune56Issue() {
  compile "npm-prune-5-6-issue"
  assertCaptured "npm 5.6.0"
  assertCaptured "Skipping because npm 5.6.0 sometimes fails"
  assertCaptured "https://github.com/npm/npm/issues/19356"
  assertCapturedSuccess
}

testAvoidHttpProxyVersionResolutionIssue() {
  env_dir=$(mktmpdir)
  # Set a non-sense http proxy address. This will cause version resolution to fail
  echo "http://localhost:5001" > $env_dir/HTTP_PROXY
  # Set the NO_PROXY value, as described in documentation. This will exclude the domain
  #  from the proxy
  echo "amazonaws.com" > $env_dir/NO_PROXY
  compile "node-14" "$(mktmpdir)" $env_dir
  assertCapturedSuccess
}

testPluginInstallationBuildTime() {
  # The plugin should be installed for Node 8, 9, 10
  compile "node-8"
  assertFileExists "${compile_dir}/.heroku/heroku-nodejs-plugin/heroku-nodejs-plugin.node"

  compile "node-9"
  assertFileExists "${compile_dir}/.heroku/heroku-nodejs-plugin/heroku-nodejs-plugin.node"

  compile "node-10"
  assertFileExists "${compile_dir}/.heroku/heroku-nodejs-plugin/heroku-nodejs-plugin.node"

  compile "node-11"
  assertFileExists "${compile_dir}/.heroku/heroku-nodejs-plugin/heroku-nodejs-plugin.node"

  compile "node-12"
  assertFileExists "${compile_dir}/.heroku/heroku-nodejs-plugin/heroku-nodejs-plugin.node"

  compile "node-13"
  assertFileExists "${compile_dir}/.heroku/heroku-nodejs-plugin/heroku-nodejs-plugin.node"

  compile "node-14"
  assertFileExists "${compile_dir}/.heroku/heroku-nodejs-plugin/heroku-nodejs-plugin.node"

  # but not for earlier versions
  compile "node-6"
  assertFileDoesNotExist "${compile_dir}/.heroku/heroku-nodejs-plugin/heroku-nodejs-plugin.node"
}

testPluginInstallationRunTime() {
  local env_dir=$(mktmpdir)
  compile "node-14" "$(mktmpdir)" $env_dir

  # by default $NODE_OPTIONS is unmodifed
  executeStartup $env_dir
  assertEquals "" "$NODE_OPTIONS"
  cleanupStartup

  # If $HEROKU_METRICS_URL is defined at run time, the script
  # should add a require statement to $NODE_OPTIONS
  export HEROKU_METRICS_URL=https://localhost:5000
  executeStartup $env_dir
  assertEquals "--require $compile_dir/.heroku/heroku-nodejs-plugin" "$NODE_OPTIONS"
  cleanupStartup

  # unless $HEROKU_SKIP_NODE_PLUGIN is defined
  export HEROKU_METRICS_URL=https://localhost:5000
  export HEROKU_SKIP_NODE_PLUGIN=true
  executeStartup $env_dir
  assertEquals "" "$NODE_OPTIONS"
  cleanupStartup

  # if $NODE_OPTIONS already exists, it will append the require command
  export HEROKU_METRICS_URL=https://localhost:5000
  export NODE_OPTIONS="--max-old-space-size=128"
  executeStartup $env_dir
  assertEquals "--max-old-space-size=128 --require $compile_dir/.heroku/heroku-nodejs-plugin" "$NODE_OPTIONS"
  cleanupStartup

  # and it will leave it unchanged if $HEROKU_SKIP_NODE_PLUGIN is defined
  export HEROKU_METRICS_URL=https://localhost:5000
  export NODE_OPTIONS="--max-old-space-size=128"
  export HEROKU_SKIP_NODE_PLUGIN=true
  executeStartup $env_dir
  assertEquals "--max-old-space-size=128" "$NODE_OPTIONS"
  cleanupStartup
}

testPluginInstallationUnsupportedNodeRunTime() {
  local env_dir=$(mktmpdir)
  compile "node-6" "$(mktmpdir)" $env_dir

  # This can happen if a user opts-in to the feature but is not using a supported node version
  export HEROKU_METRICS_URL=https://localhost:5000
  executeStartup $env_dir
  assertEquals "" "$NODE_OPTIONS"
  cleanupStartup
}

testMemoryMetrics() {
  env_dir=$(mktmpdir)
  local metrics_log=$(mktemp)
  echo "$metrics_log" > $env_dir/BUILDPACK_LOG_FILE

  compile "pre-post-build-scripts" "$(mktmpdir)" $env_dir
  assertFileContains "measure#buildpack.nodejs.exec.install-node-binary.time=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.install-npm-binary.time=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.heroku-prebuild-script.time=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.heroku-prebuild-script.memory=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.npm-install.time=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.npm-install.memory=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.heroku-postbuild-script.time=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.heroku-postbuild-script.memory=" $metrics_log

  # erase the metrics log
  echo "" > $metrics_log
  compile "yarn" "$(mktmpdir)" $env_dir
  assertFileContains "measure#buildpack.nodejs.exec.install-node-binary.time=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.install-yarn-binary.time=" $metrics_log
  assertFileContains "measure#buildpack.nodejs.exec.yarn-install.memory=" "$metrics_log"
  assertFileContains "measure#buildpack.nodejs.exec.yarn-install.time=" "$metrics_log"
  # this fixture does not have pre or post-build scripts
  assertFileNotContains "measure#buildpack.nodejs.exec.heroku-prebuild-script.time=" $metrics_log
  assertFileNotContains "measure#buildpack.nodejs.exec.heroku-prebuild-script.memory=" $metrics_log
  assertFileNotContains "measure#buildpack.nodejs.exec.heroku-postbuild-script.time=" $metrics_log
  assertFileNotContains "measure#buildpack.nodejs.exec.heroku-postbuild-script.memory=" $metrics_log
}

testBuildMetaData() {
  local log_file=$(mktemp)

  BUILDPACK_LOG_FILE="$log_file" compile "pre-post-build-scripts"

  # build info
  assertFileContains "node-package-manager=npm" $log_file
  assertFileContains "checked-in-node-modules=false" $log_file
  assertFileContains "has-node-lock-file=false" $log_file
  assertFileContains "cache-status=not-found" $log_file
  assertFileContains "node-build-success=true" $log_file
  assertFileContains "build-time=" $log_file
  assertFileContains "app-uuid=" $log_file
  assertFileContains "build-uuid=" $log_file
  assertFileContains "build-step=finished" $log_file
  assertFileContains "uses-workspaces=false" $log_file
  assertFileContains "workspaces=" $log_file
  assertFileContains "num-project-files=0" $log_file

  # binary versions
  assertFileContains "node-version-request=10.x" $log_file
  assertFileContains "npm-version-request= " $log_file

  # log build scripts
  assertFileContains "heroku-prebuild-script=\"echo heroku-prebuild hook message\"" $log_file
  assertFileContains "heroku-postbuild-script=\"echo heroku-postbuild hook message\"" $log_file
  assertFileContains "build-script= " $log_file

  # monitor calls
  assertFileContains "install-node-binary-memory=" $log_file
  assertFileContains "install-node-binary-time=" $log_file
  assertFileContains "install-npm-binary-time=" $log_file
  assertFileContains "install-npm-binary-memory=" $log_file
  assertFileContains "heroku-prebuild-script-time=" $log_file
  assertFileContains "heroku-prebuild-script-memory=" $log_file
  assertFileContains "npm-install-time=" $log_file
  assertFileContains "npm-install-memory=" $log_file
  assertFileContains "heroku-postbuild-script-time=" $log_file
  assertFileContains "heroku-postbuild-script-memory=" $log_file
  assertFileContains "npm-prune-memory=" $log_file
  assertFileContains "npm-prune-time=" $log_file
  assertFileContains "restore-cache-time=" $log_file
  assertFileContains "save-cache-time=" $log_file

  # resolve-version tests
  cat $log_file
  assertFileContainsMatch 'resolve-v1-node="10.[[:digit:]]+.[[:digit:]]+ https://heroku-nodebin.s3.us-east-1.amazonaws.com/node/release/linux-x64/node-v10.[[:digit:]]+.[[:digit:]]+-linux-x64.tar.gz"' $log_file
  assertFileContainsMatch 'resolve-v2-node="10.[[:digit:]]+.[[:digit:]]+ https://heroku-nodebin.s3.us-east-1.amazonaws.com/node/release/linux-x64/node-v10.[[:digit:]]+.[[:digit:]]+-linux-x64.tar.gz"' $log_file
  assertFileContains "resolve-is-equal-node=true" $log_file

  # erase the log file
  echo "" > $log_file
  BUILDPACK_LOG_FILE="$log_file" compile "yarn"

  assertFileContains "node-package-manager=yarn" $log_file
  assertFileContains "has-node-lock-file=true" $log_file
  assertFileContains "yarn-version-request=1.x" $log_file
  assertFileContains "yarn-version=1." $log_file
  assertFileContains "install-yarn-binary-memory=" $log_file
  assertFileContains "install-yarn-binary-time=" $log_file
  assertFileContains "node-build-success=true" $log_file

  # resolve-version tests
  assertFileContainsMatch 'resolve-v1-yarn="1.[[:digit:]]+.[[:digit:]]+ https://heroku-nodebin.s3.us-east-1.amazonaws.com/yarn/release/yarn-v1.[[:digit:]]+.[[:digit:]]+.tar.gz"' $log_file
  assertFileContainsMatch 'resolve-v2-yarn="1.[[:digit:]]+.[[:digit:]]+ https://heroku-nodebin.s3.us-east-1.amazonaws.com/yarn/release/yarn-v1.[[:digit:]]+.[[:digit:]]+.tar.gz"' $log_file
  assertFileContains "resolve-is-equal-yarn=true" $log_file
}

testWorkspaceMetaData() {
  local log_file=$(mktemp)

  BUILDPACK_LOG_FILE="$log_file" compile "yarn-workspaces"

  # We're using yarn 1.x, workspaces could change in future yarn versions
  assertFileContains "yarn-version-request=1.x" $log_file
  assertFileContains "yarn-version=1." $log_file
  assertFileContains "uses-workspaces=true" $log_file
  assertFileContains "workspaces=[\"packages/*\"]" $log_file
}

testFeatureLogging() {
  local log_file=$(mktemp)

  BUILDPACK_LOG_FILE="$log_file" compile "dummy-feature"

  # the defined features should be logged
  assertFileContains "feature-dummy=true" $log_file
  assertFileContains "feature-dummy-2=false" $log_file
}

testFailingBuildMetaData() {
  local log_file=$(mktemp)

  BUILDPACK_LOG_FILE="$log_file" compile "bad-json"
  assertFileContains "failure=invalid-package-json" $log_file
  assertCapturedError

  echo "" > $log_file
  BUILDPACK_LOG_FILE="$log_file" compile "yarn-lockfile-out-of-date"
  assertFileContains "failure=outdated-yarn-lockfile" $log_file
  assertCapturedError
}

testPropagateAppUUID() {
  env_dir=$(mktmpdir)
  local log_file=$(mktemp)
  local cache_dir=${2:-$(mktmpdir)}
  echo "$log_file" > $env_dir/BUILDPACK_LOG_FILE

  # save the generated app-uuid for the first build
  compile "node-14" $cache_dir $env_dir
  assertFileContains "app-uuid=" $log_file
  local uuid=$(cat $log_file | sed -n -e 's/^.*app-uuid=\([^ ]*\).*/\1/p')

  # create a new log file
  log_file=$(mktemp)
  echo "$log_file" > $env_dir/BUILDPACK_LOG_FILE

  # recompile with the same cache directory
  compile "node-14" $cache_dir $env_dir
  assertFileContains "app-uuid" $log_file
  # make sure that the app-uuid is the same
  assertEquals "$uuid" "$(cat $log_file | sed -n -e 's/^.*app-uuid=\([^ ]*\).*/\1/p')"
}

testBinDetectWarnings() {
  detect "slugignore-package-json"
  assertCapturedError "'package.json' listed in '.slugignore' file"
  assertCapturedError "https://devcenter.heroku.com/articles/slug-compiler#ignoring-files-with-slugignore"

  detect "gitignore-package-json"
  assertCapturedError "'package.json' listed in '.gitignore' file"
  assertCapturedError "https://devcenter.heroku.com/articles/gitignore"

  detect "node-project-missing-package-json"
  assertCapturedError "Application not supported by 'heroku/nodejs' buildpack"
  assertCapturedError "https://devcenter.heroku.com/articles/nodejs-support#activation"
  assertCapturedError "index.js"
  assertCapturedError "src/"
}

testBinReportEmptyDirectory() {
  local empty_dir=$(mktmpdir)
  # running bin/report on an empty directory should not fail
  report "$empty_dir"
  assertCapturedSuccess
}

testBinReportSuccess() {
  compile_and_report "node-14"
  assertCapturedSuccess

  assertCaptured "package_manager: \"npm\""
  assertCaptured "node_version: \"v14"
  assertCaptured "node_version_request: \"14.x\""
  assertCaptured "lock_file: false"
  assertCaptured "start_script: \"node foo.js\""
  assertCaptured "num_project_files: 1"
  assertCaptured "cache_status: \"not-found\""
  assertCaptured "build_step: \"finished\""
  assertCaptured "build_time:"
  assertCaptured "install_node_binary_time:"

  # there are no scripts in the fixture
  assertNotCaptured "build_script:"
  assertNotCaptured "heroku_postbuild_script:"
  assertNotCaptured "heroku_prebuild_script:"
}

testBinReportScriptsWithQuotes() {
  compile_and_report "complex-scripts"
  assertCapturedSuccess

  # quotes and escaped quotes are tricky, but should be escaped correctly
  assertCaptured "start_script: \"\\\"no closing quote\""
  assertCaptured "build_script: \"concurrently \\\"npm run build-server\\\" npm run build-client\""
  assertCaptured "heroku_postbuild_script: \"if [ -z \\\"\${CI}\\\" ]; then yarn build-assets; fi\""
  assertCaptured "postinstall_script: \"if [ \\\"\${NODE_ENV}\\\" = \\\"staging\\\" ]; then env ASSETS_ENV=production gulp assets:build; else echo \\\"Skipped heroku-postbuild\\\"; fi\""
}

testBinReportYarn() {
  compile_and_report "yarn"
  assertCaptured "package_manager: \"yarn\""
}

testNpmCiCaching() {
  cache_dir=$(mktmpdir)
  env_dir=$(mktmpdir)
  echo "http" > $env_dir/NPM_CONFIG_LOGLEVEL

  compile "ci-caching" $cache_dir $env_dir
  assertNotCaptured "Restoring cache"
  assertCaptured "Caching build"
  assertCaptured "- npm cache"
  assertCaptured "npm http fetch GET"
  assertCapturedSuccess

  compile "ci-caching" $cache_dir $env_dir
  assertCaptured "Restoring cache"
  assertCaptured "Caching build"
  assertCaptured "- npm cache"
  assertNotCaptured "npm http fetch GET"
  assertCapturedSuccess
}

testNpmCiCachingWhenUseNpmInstallIsTrue() {
  cache_dir=$(mktmpdir)
  env_dir=$(mktmpdir)
  echo "true" > $env_dir/USE_NPM_INSTALL

  compile "ci-caching" $cache_dir $env_dir
  assertNotCaptured "Restoring cache"
  assertCaptured "Caching build"
  assertNotCaptured "- npm cache"
  assertCaptured "- node_modules"
  assertCapturedSuccess

  compile "ci-caching" $cache_dir $env_dir
  assertCaptured "Restoring cache"
  assertCaptured "Caching build"
  assertCaptured "- node_modules"
  assertNotCaptured "- npm cache"
  assertCapturedSuccess
}

testNpmCiCachingWhenUseNpmInstallIsFalse() {
  cache_dir=$(mktmpdir)
  env_dir=$(mktmpdir)
  echo "http" > $env_dir/NPM_CONFIG_LOGLEVEL
  echo "false" > $env_dir/USE_NPM_INSTALL

  compile "ci-caching" $cache_dir $env_dir
  assertNotCaptured "Restoring cache"
  assertCaptured "Caching build"
  assertCaptured "- npm cache"
  assertCaptured "npm http fetch GET"
  assertCapturedSuccess

  compile "ci-caching" $cache_dir $env_dir
  assertCaptured "Restoring cache"
  assertCaptured "Caching build"
  assertCaptured "- npm cache"
  assertNotCaptured "npm http fetch GET"
  assertCapturedSuccess
}

# Utils

pushd "$(dirname 0)" >/dev/null
popd >/dev/null

source "$(pwd)"/test/utils
source "$(pwd)"/lib/environment.sh

mktmpdir() {
  dir=$(mktemp -t testXXXXX)
  rm -rf $dir
  mkdir $dir
  echo $dir
}

detect() {
  capture "$(pwd)"/bin/detect "$(pwd)"/test/fixtures/$1
}

compile_dir=""

default_process_types_cleanup() {
  file="/tmp/default_process_types"
  if [ -f "$file" ]; then
    rm "$file"
  fi
}

detect() {
  default_process_types_cleanup
  bp_dir=$(mktmpdir)
  compile_dir=$(mktmpdir)
  cp -a "$(pwd)"/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture ${bp_dir}/bin/detect ${compile_dir}
}

compile() {
  default_process_types_cleanup
  bp_dir=$(mktmpdir)
  compile_dir=$(mktmpdir)
  cp -a "$(pwd)"/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}

  # if there isn't a features override, add an empty one to ensure
  # that any features will not influence tests unless they are
  # explicitly defined
  if [[ ! -f "${compile_dir}/heroku-buildpack-features" ]]; then
    touch "${compile_dir}/heroku-buildpack-features"
  fi

  capture ${bp_dir}/bin/compile ${compile_dir} ${2:-$(mktmpdir)} $3
}

# run compile on a fixture and then capture the output of bin/report
# ran after bin/compile completes, reusing the cache and env dirs. Note
# that the output of bin/compile will not be captured
compile_and_report() {
  default_process_types_cleanup
  cache_dir=${2:-$(mktmpdir)}
  env_dir=${3:-$(mktmpdir)}

  bp_dir=$(mktmpdir)
  cp -a "$(pwd)"/* ${bp_dir}

  compile_dir=$(mktmpdir)
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}

  # if there isn't a features override, add an empty one to ensure
  # that any features will not influence tests unless they are
  # explicitly defined
  if [[ ! -f "${compile_dir}/heroku-buildpack-features" ]]; then
    touch "${compile_dir}/heroku-buildpack-features"
  fi

  ${bp_dir}/bin/compile ${compile_dir} $cache_dir $env_dir > /dev/null 2>/dev/null
  capture ${bp_dir}/bin/report ${compile_dir} $cache_dir $env_dir
}

# Run bin/report on a set of given directories without first invoking bin/compile
# This is useful because in the case of a buildpack bug, you cannot trust that
# any binaries will be installed or any part of the cache available, and bin/report
# should be resilient in that case.
report() {
  default_process_types_cleanup

  compile_dir=${1:-$(mktmpdir)}
  cache_dir=${2:-$(mktmpdir)}
  env_dir=${3:-$(mktmpdir)}

  bp_dir=$(mktmpdir)
  cp -a "$(pwd)"/* ${bp_dir}

  capture ${bp_dir}/bin/report ${compile_dir} ${cache_dir} ${env_dir}
}

testCompile() {
  default_process_types_cleanup
  bp_dir=$(mktmpdir)
  compile_dir=$(mktmpdir)
  cp -a "$(pwd)"/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture ${bp_dir}/bin/test-compile ${compile_dir} ${2:-$(mktmpdir)} $3
}

# This is meant to be run after `compile`. `cleanupStartup` must be run
# after this function is called before other tests are executed
executeStartup() {
  local env_dir=$1

  # On Heroku, $HOME is the /app dir, so we need to set it to
  # the compile_dir here
  export HOME=${compile_dir}

  # we need to set any environment variables set via the env_dir and run
  # all of the .profile.d scripts
  export_env_dir $env_dir

  for f in ${compile_dir}/.profile.d/*; do source $f > /dev/null 2> /dev/null ; done
}

cleanupStartup() {
  unset HOME
  unset NODE_ENV
  unset NODE_HOME
  unset NODE_OPTIONS
  unset DYNO
  unset HEROKU_METRICS_URL
  unset HEROKU_SKIP_NODE_PLUGIN
}

compileTest() {
  default_process_types_cleanup

  local bp_dir=$(mktmpdir)
  local compile_dir=$(mktmpdir)
  local cache_dir=${2:-$(mktmpdir)}
  local env_dir=$3

  cp -a "$(pwd)"/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture ${bp_dir}/bin/test-compile ${compile_dir} ${2:-$(mktmpdir)} $3

  # On Heroku, $HOME is the /app dir, so we need to set it to
  # the compile_dir here
  export HOME=${compile_dir}

  # bin/test is not ran during build, rather during runtime, which means
  # we need to set any environment variables set via the env_dir and run
  # all of the .profile.d scripts
  export_env_dir $env_dir
  for f in ${compile_dir}/.profile.d/*; do source $f > /dev/null 2> /dev/null ; done

  capture ${bp_dir}/bin/test ${compile_dir}

  unset HOME
  unset NODE_ENV
  unset NODE_HOME
}

compileDir() {
  default_process_types_cleanup

  local bp_dir=$(mktmpdir)
  local compile_dir=${1:-$(mktmpdir)}
  local cache_dir=${2:-$(mktmpdir)}
  local env_dir=$3

  cp -a "$(pwd)"/* ${bp_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${cache_dir} ${env_dir}
}

release() {
  bp_dir=$(mktmpdir)
  cp -a "$(pwd)"/* ${bp_dir}
  capture ${bp_dir}/bin/release ${bp_dir}/test/fixtures/$1
}

assertFile() {
  assertEquals "$1" "$(cat ${compile_dir}/$2)"
}

source "$(pwd)"/test/shunit2
