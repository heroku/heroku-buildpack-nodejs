#!/usr/bin/env bash
# See README.md for info on running these tests.

testCanaryNode() {
  compile "node-canary"
  assertCaptured "Resolving 'canary' node version"
  assertCaptured "-nightly"
  assertCapturedSuccess
}

testLTSNode() {
  compile "node-lts"
  assertCaptured "Resolving 'lts' node version"
  assertCaptured "Downloading node 6."
  assertCapturedSuccess
}

testStableNode() {
  compile "node-stable"
  assertCaptured "Resolving 'stable' node version"
  assertCaptured "Downloading node 6."
  assertCapturedSuccess
}

testMaintenanceNode() {
  compile "node-maintenance"
  assertCaptured "Resolving 'maintenance' node version"
  assertCaptured "Downloading node 0.12."
  assertCapturedSuccess
}

testWarnUnmetDep() {
  compile "unmet-dep"
  assertCaptured "may cause runtime issues"
  assertCapturedSuccess
  compile "no-version"
  assertNotCaptured "may cause runtime issues"
  assertCapturedSuccess
}

testWarnEconnreset() {
  compile "econnreset-mock"
  assertCaptured "may be related to npm versions"
  assertCapturedError
  compile "no-version"
  assertNotCaptured "may be related to npm versions"
  assertCapturedSuccess
}

testWarnNoStart() {
  compile "no-start"
  assertCaptured "may not specify any way to start"
  assertCapturedSuccess
  compile "no-version"
  assertNotCaptured "may not specify any way to start"
  assertCapturedSuccess
}

testWarnDevDeps() {
  compile "missing-devdeps-1"
  assertCaptured "A module may be missing"
  assertNotCaptured "This module may be specified"
  assertCapturedError
  compile "missing-devdeps-2"
  assertCaptured "A module may be missing"
  assertCaptured "This module may be specified"
  assertCapturedError
  compile "failing-build"
  assertNotCaptured "A module may be missing"
  assertNotCaptured "This module may be specified"
  assertCapturedError
}

testEnvBlacklist() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo 'tr_TR.UTF-8' > "$env_dir"/LANG
  echo 'safeVar' > "$env_dir"/SAFE
  compile "echo-lang" $cache $env_dir
  assertCaptured "safeVar"
  assertNotCaptured "tr_TR.UTF-8"
  assertCapturedSuccess
}

testPrePostBuildScripts() {
  compile "pre-post-build-scripts"
  assertCaptured "Running heroku-prebuild"
  assertCaptured "echo heroku-prebuild hook message"
  assertCaptured "Running heroku-postbuild"
  assertCaptured "echo heroku-postbuild hook message"
  assertCapturedSuccess

  compile "stable-node"
  assertNotCaptured "Running heroku-prebuild"
  assertNotCaptured "Running heroku-postbuild"
  assertCapturedSuccess
}

testWarningsOnFailure() {
  compile "many-warnings"
  assertCaptured "troubleshooting-node-deploys"
  assertCaptured "node_modules checked into source"
  assertCaptured "has several known issues"
  assertNotCaptured "please submit a ticket"
  assertCapturedError
}

testMultipleRuns() {
  local compileDir=$(mktmpdir)
  local cacheDir=$(mktmpdir)

  cp -a test/fixtures/stable-node/. ${compileDir}
  compileDir "$compileDir" "$cacheDir"
  assertCapturedSuccess
  compileDir "$compileDir" "$cacheDir"
  assertCapturedSuccess
}

testDisableCache() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  compile "node-modules-cache-1" $cache
  assertCaptured "lodash@1.0.0"
  assertEquals "1" "$(ls -1 $cache/node/node_modules | grep lodash | wc -l | tr -d ' ')"
  assertCapturedSuccess

  compile "node-modules-cache-2" $cache
  assertCaptured "lodash@1.0.0"
  assertCaptured "Saving 2 cacheDirectories"
  assertCapturedSuccess

  echo "false" > $env_dir/NODE_MODULES_CACHE
  compile "node-modules-cache-2" $cache $env_dir
  assertCaptured "lodash@1.3.1"
  assertNotCaptured "Saving 2 cacheDirectories"
  assertCapturedSuccess
}

testBowerAngularResolution() {
  compile "bower-angular-resolution"
  assertCaptured "Bower may need a resolution hint for angular"
  assertCapturedError
}

testUntrackedDependencies() {
  compile "missing-grunt"
  assertCaptured "Grunt may not be tracked in package.json"
  assertCapturedError
}

testBadJson() {
  compile "bad-json"
  assertCaptured "Build failed"
  assertCaptured "We're sorry this build is failing"
  assertNotCaptured "Installing binaries"
  assertCapturedError 1 "Unable to parse"
}

testNodeModulesCached() {
  cache=$(mktmpdir)

  compile "caching" $cache
  assertCaptured "Saving 2 cacheDirectories (default)"
  assertCaptured "- node_modules"
  assertCaptured "- bower_components (nothing to cache)"
  assertEquals "1" "$(ls -1 $cache/node | grep node_modules | wc -l | tr -d ' ')"
  assertCapturedSuccess
}

testBuildWithUserCacheDirectoriesCamel() {
  cache=$(mktmpdir)

  compile "cache-directories-camel" $cache
  assertCaptured "- non/existent (nothing to cache)"
  assertEquals "1" "$(ls -1 $cache/node/server | grep node_modules | wc -l | tr -d ' ')"
  assertEquals "1" "$(ls -1 $cache/node/client | grep node_modules | wc -l | tr -d ' ')"
  assertCapturedSuccess

  compile "cache-directories-camel" $cache
  assertCaptured "Loading 3 from cacheDirectories"
  assertCaptured "- server/node_modules"
  assertCaptured "- client/node_modules"
  assertCaptured "- non/existent (not cached - skipping)"
  assertCapturedSuccess
}

testConcurrency1X() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=512 capture $(pwd)/profile/nodejs.sh
  assertCaptured "Detected 512 MB available memory, 512 MB limit per process (WEB_MEMORY)"
  assertCaptured "Recommending WEB_CONCURRENCY=1"
  assertCapturedSuccess
}

testConcurrency2X() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=1024 capture $(pwd)/profile/nodejs.sh
  assertCaptured "Detected 1024 MB available memory, 512 MB limit per process (WEB_MEMORY)"
  assertCaptured "Recommending WEB_CONCURRENCY=2"
  assertCapturedSuccess
}

testConcurrencyPerformanceM() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=2560 capture $(pwd)/profile/nodejs.sh
  assertCaptured "Detected 2560 MB available memory, 512 MB limit per process (WEB_MEMORY)"
  assertCaptured "Recommending WEB_CONCURRENCY=5"
  assertCapturedSuccess
}

testConcurrencyPerformanceL() {
   LOG_CONCURRENCY=true MEMORY_AVAILABLE=14336 capture $(pwd)/profile/nodejs.sh
   assertCaptured "Detected 14336 MB available memory, 512 MB limit per process (WEB_MEMORY)"
   assertCaptured "Recommending WEB_CONCURRENCY=28"
   assertCapturedSuccess
}

testConcurrencyCustomLimit() {
  LOG_CONCURRENCY=true MEMORY_AVAILABLE=1024 WEB_MEMORY=256 capture $(pwd)/profile/nodejs.sh
  assertCaptured "Detected 1024 MB available memory, 256 MB limit per process (WEB_MEMORY)"
  assertCaptured "Recommending WEB_CONCURRENCY=4"
  assertCapturedSuccess
}

testInvalidNode() {
  compile "invalid-node"
  assertCaptured "Downloading node 0.11.333"
  assertCaptured "Unable to download node 0.11.333"
  assertCapturedError
}

testInvalidIo() {
  compile "invalid-io"
  assertCaptured "Downloading and installing iojs 2.0.99"
  assertCaptured "Unable to download iojs 2.0.99"
  assertCapturedError
}

testBuildWithCache() {
  cache=$(mktmpdir)

  compile "stable-node" $cache
  assertCaptured "Skipping cache restore (new runtime"
  assertEquals "1" "$(ls -1 $cache/node | grep node_modules | wc -l | tr -d ' ')"
  assertCapturedSuccess

  compile "stable-node" $cache
  assertNotCaptured "- node_modules (not cached - skipping)"
  assertCapturedSuccess

  rm -rf "$cache/node/node_modules"
  compile "stable-node" $cache
  assertCaptured "- node_modules (not cached - skipping)"
  assertCapturedSuccess
}

testSignatureInvalidation() {
  cache=$(mktmpdir)
  env_dir=$(mktmpdir)

  compile "node-0.12.6" $cache
  assertCaptured "Downloading node 0.12.6"
  assertCapturedSuccess

  compile "node-0.12.7" $cache
  assertCaptured "Downloading node 0.12.7"
  assertCaptured "Skipping cache restore (new runtime"
  assertCapturedSuccess
}

testModulesCheckedIn() {
  cache=$(mktmpdir)
  compile "modules-checked-in" $cache
  assertCapturedSuccess

  compile "modules-checked-in" $cache
  assertCaptured "Prebuild detected"
  assertCaptured "Rebuilding any native modules"
  assertCaptured "(preinstall script)"
  assertCaptured "Installing any new modules"
  assertCaptured "(postinstall script)"
  assertCapturedSuccess
}

testDetectWithPackageJson() {
  detect "stable-node"
  assertCaptured "Node.js"
  assertCapturedSuccess
}

testDetectWithoutPackageJson() {
  detect "no-package-json"
  assertCapturedError 1 ""
}

testIoJs() {
  compile "iojs"
  assertCaptured "engines.iojs (package.json):  1.0."
  assertCaptured "Downloading and installing iojs 1.0."
  assertNotCaptured "Downloading npm"
  assertCapturedSuccess
}

testNoVersion() {
  compile "no-version"
  assertCaptured "engines.node (package.json):  unspecified"
  assertCaptured "Resolving 'LTS' node version"
  assertCaptured "Downloading node 6."
  assertCapturedSuccess
}

testSpecificVersion() {
  compile "specific-version"
  assertNotCaptured "node version..."
  assertCaptured "Downloading node 0.10.29"
  assertCaptured "Using packaged npm version: 1.4.14"
  assertCapturedSuccess
}

testStableVersion() {
  compile "stable-node"
  assertCaptured "Downloading node 0.10."
  assertNotCaptured "We're sorry this build is failing"
  assertCapturedSuccess
}

testUnstableVersion() {
  compile "unstable-version"
  assertCaptured "Resolving '0.11.x' node version"
  assertCaptured "Downloading node 0.11."
  assertCapturedSuccess
}

testOldNpm() {
  compile "old-npm"
  assertCaptured "This version of npm (1.2.8000) has several known issues - consider upgrading to the latest release (3."
  assertNotCaptured "integer expression expected"
  assertCapturedError
}

testOldNpm2() {
  compile "failing-build"
  assertCaptured "This version of npm (1.4.28) has several known issues"
}

testNonexistentNpm() {
  compile "nonexistent-npm"
  assertCaptured "version not found: npm@1.1.65"
  assertCapturedError 1 ""
}

testSameNpm() {
  compile "same-npm"
  assertCaptured "npm 1.4.28 already installed"
  assertCapturedSuccess
}

testNpmVersionRange() {
  compile "npm-version-range"
  assertCaptured "Resolving npm version"
  assertCaptured "installing npm 1.4."
  assertCapturedSuccess
}

testNpmVersionSpecific() {
  compile "npm-version-specific"
  assertCaptured "installing npm 2.1.11"
  assertNotCaptured "Resolving npm version"
  assertNotCaptured "WARNING"
  assertCapturedSuccess
}

testFailingBuild() {
  compile "failing-build"
  assertCaptured "Building dependencies"
  assertCaptured "Build failed"
  assertCaptured "We're sorry this build is failing"
  assertNotCaptured "Checking startup method"
  assertCapturedError 1 ""
}

testTicketOnFailure() {
  compile "invalid-dependency"
  assertCaptured "troubleshooting-node-deploys"
  assertCaptured "please submit a ticket"
  assertNotCaptured "possible problems"
  assertCapturedError
}

testInfoEmpty() {
  compile "info-empty"
  assertCaptured "engines.node (package.json):  unspecified"
  assertCaptured "engines.npm (package.json):   unspecified"
  assertCaptured "Installing node modules (package.json)"
  assertCapturedSuccess
}

testDangerousRangeStar() {
  compile "dangerous-range-star"
  assertCaptured "Dangerous semver range"
  assertCaptured "Resolving '*' node version"
  assertCaptured "Downloading node 6."
  assertCapturedError
}

testDangerousRangeGreaterThan() {
  compile "dangerous-range-greater-than"
  assertCaptured "Dangerous semver range"
  assertCaptured "Resolving '>0.4' node version"
  assertCaptured "Downloading node 6."
  assertCapturedError
}

testRangeWithSpace() {
  compile "range-with-space"
  assertCaptured "Resolving '>=0.8.x' node version"
  assertCaptured "Downloading node 6."
  assertCapturedSuccess
}

testInvalidDependency() {
  compile "invalid-dependency"
  assertCaptured "npm ERR! 404"
  assertCapturedError 1 ""
}

testBuildWithUserCacheDirectories() {
  cache=$(mktmpdir)

  compile "cache-directories" $cache
  assertCaptured "Saving 2 cacheDirectories"
  assertEquals "1" "$(ls -1 $cache/node | grep bower_components | wc -l | tr -d ' ')"
  assertEquals "1" "$(ls -1 $cache/node | grep node_modules | wc -l | tr -d ' ')"
  assertCapturedSuccess

  compile "cache-directories" $cache
  assertCaptured "Loading 2 from cacheDirectories"
  assertCaptured "- node_modules"
  assertCaptured "- bower_components"
  assertCapturedSuccess
}

testUserConfig() {
  compile "userconfig"
  assertCaptured "www.google.com"
  assertCaptured "registry error"
  assertCapturedError 1 ""
}

testDefaultProcType() {
  release "stable-node"
  assertCaptured "web: npm start"
  assertCapturedSuccess
}

testDynamicProcfile() {
  compile "dynamic-procfile"
  assertFileContains "web: node index.js customArg" "${compile_dir}/Procfile"
  assertCapturedSuccess
}

testEnvVars() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_PRODUCTION
  compile "stable-node" "$(mktmpdir)" $env_dir
  assertCaptured "NPM_CONFIG_PRODUCTION=false"
  assertCapturedSuccess
}

testNoEnvVars() {
  env_dir=$(mktmpdir)
  compile "stable-node" "$(mktmpdir)" $env_dir
  assertCaptured "NPM_CONFIG_PRODUCTION=true"
  assertCapturedSuccess
}

testNonFileEnvVars() {
  export NPM_CONFIG_FOO=bar
  export NPM_CONFIG_PRODUCTION=false
  compile "stable-node"
  assertCaptured "NPM_CONFIG_FOO=bar"
  assertCaptured "NPM_CONFIG_PRODUCTION=false"
  assertCapturedSuccess
  unset NPM_CONFIG_FOO
  unset NPM_CONFIG_PRODUCTION
}

testNoDevDependencies() {
  compile "dev-dependencies"
  assertNotCaptured "lodash"
  assertCapturedSuccess
}

testDevDependencies() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_PRODUCTION
  compile "dev-dependencies" "$(mktmpdir)" $env_dir
  assertCaptured "lodash"
  assertCapturedSuccess
}

testOptionalDependencies() {
  env_dir=$(mktmpdir)
  compile "optional-dependencies" "$(mktmpdir)" $env_dir
  assertNotCaptured "NPM_CONFIG_OPTIONAL"
  assertCaptured "less"
  assertCaptured "mime"
  assertCaptured "mkdirp"
  assertCaptured "clean-css"
  assertCaptured "request"
  assertCapturedSuccess
}

testNoOptionalDependencies() {
  env_dir=$(mktmpdir)
  echo "false" > $env_dir/NPM_CONFIG_OPTIONAL
  compile "optional-dependencies" "$(mktmpdir)" $env_dir
  assertCaptured "NPM_CONFIG_OPTIONAL=false"
  assertCaptured "less"
  assertNotCaptured "mime"
  assertNotCaptured "mkdirp"
  assertNotCaptured "clean-css"
  assertNotCaptured "request"
  assertCapturedSuccess
}

testNpmrc() {
  compile "dev-dependencies"
  assertNotCaptured "lodash"
  assertCapturedSuccess

  compile "dev-dependencies-npmrc"
  assertCaptured "lodash"
  assertCapturedSuccess
}

testShrinkwrap() {
  compile "shrinkwrap"
  assertCaptured "express@4.10.4"
  assertCaptured "lodash@2.4.0"
  assertNotCaptured "mocha"
  assertCapturedSuccess
}

testProfileExport() {
  compile "stable-node"
  assertCaptured "Creating runtime environment"
  assertFileContains "export PATH=\"\$HOME/.heroku/node/bin:\$PATH:\$HOME/bin:\$HOME/node_modules/.bin\"" "${compile_dir}/.profile.d/nodejs.sh"
  assertFileContains "export NODE_HOME=\"\$HOME/.heroku/node\"" "${compile_dir}/.profile.d/nodejs.sh"
  assertCapturedSuccess
}

testMultiExport() {
  compile "stable-node"
  assertFileContains "export PATH=" "${bp_dir}/export"
  assertFileContains "/.heroku/node/bin" "${bp_dir}/export"
  assertFileContains "/node_modules/.bin" "${bp_dir}/export"
  assertFileContains "export NODE_HOME=" "${bp_dir}/export"
  assertFileContains "/.heroku/node\"" "${bp_dir}/export"
  assertCapturedSuccess
}

# Utils

pushd $(dirname 0) >/dev/null
popd >/dev/null

source $(pwd)/test/utils

mktmpdir() {
  dir=$(mktemp -t testXXXXX)
  rm -rf $dir
  mkdir $dir
  echo $dir
}

detect() {
  capture $(pwd)/bin/detect $(pwd)/test/fixtures/$1
}

compile_dir=""

default_process_types_cleanup() {
  file="/tmp/default_process_types"
  if [ -f "$file" ]; then
    rm "$file"
  fi
}

compile() {
  default_process_types_cleanup
  bp_dir=$(mktmpdir)
  compile_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${2:-$(mktmpdir)} $3
}

compileDir() {
  default_process_types_cleanup

  local bp_dir=$(mktmpdir)
  local compile_dir=${1:-$(mktmpdir)}
  local cache_dir=${2:-$(mktmpdir)}
  local env_dir=$3

  cp -a $(pwd)/* ${bp_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${cache_dir} ${env_dir}
}

release() {
  bp_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  capture ${bp_dir}/bin/release ${bp_dir}/test/fixtures/$1
}

assertFile() {
  assertEquals "$1" "$(cat ${compile_dir}/$2)"
}

source $(pwd)/test/shunit2
