/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-prune-dev-dependencies",
factory: function (require) {
"use strict";var plugin=(()=>{var m=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var g=Object.prototype.hasOwnProperty;var d=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,o)=>(typeof require<"u"?require:e)[o]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var x=(t,e)=>{for(var o in e)m(t,o,{get:e[o],enumerable:!0})},C=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of w(e))!g.call(t,s)&&s!==o&&m(t,s,{get:()=>e[s],enumerable:!(r=h(e,s))||r.enumerable});return t};var P=t=>C(m({},"__esModule",{value:!0}),t);var S={};x(S,{default:()=>v});var n=d("@yarnpkg/core"),i=d("@yarnpkg/fslib");var u=(t,e,o)=>{let r=e;for(let s=t.length-1,a;s>=0;s--)a=t[s],a&&(r=a(e,o,r)||r);return r&&Object.defineProperty(e,o,r),r};var f=d("clipanion"),y=n.YarnVersion??"0.0.0",c=class extends f.Command{async execute(){let e=await n.Configuration.find(this.context.cwd,this.context.plugins),{project:o}=await n.Project.find(e,this.context.cwd),r=await n.Cache.find(e);await o.restoreInstallState({restoreResolutions:!1});for(let a of o.workspaces)a.manifest.devDependencies.clear();return(await n.StreamReport.start({configuration:e,json:!1,stdout:this.context.stdout,includeLogs:!0},async a=>{try{await o.install({cache:r,report:a,persistProject:!1});for(let l of await i.xfs.readdirPromise(r.cwd)){let p=i.ppath.resolve(r.cwd,l);l===".gitignore"||r.markedFiles.has(p)||(a.reportInfo(n.MessageName.UNUSED_CACHE_ENTRY,`${n.formatUtils.pretty(e,i.ppath.basename(p),"magenta")} appears to be unused - removing`),await i.xfs.removePromise(p))}await o.persistInstallStateFile()}catch(l){console.warn("[yarn heroku prune] An error occurred while pruning development dependencies from the application!"),console.error(l)}})).exitCode()}};/^4\./.test(y)?c.paths=[["heroku","prune"]]:u([f.Command.Path("heroku","prune")],c.prototype,"execute");var j={commands:[c]},v=j;return P(S);})();
return plugin;
}
};
