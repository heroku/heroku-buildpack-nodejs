#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

run_npm() {
  command="$1"
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

# clean up leaking environment
unset GIT_DIR

# config
NODE_VERSION="0.6.7"
NPM_VERSION="1.1.0"
SCONS_VERSION="1.2.0"
S3_BUCKET="nyxnodebinaries"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NPM_VERSION"
CACHE_TARGET_DIR="$BUILD_DIR/node_modules"

# s3 packages
NODE_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/nodejs-${NODE_VERSION}.tgz"
NPM_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/npm-${NPM_VERSION}.tgz"
SCONS_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/scons-${SCONS_VERSION}.tgz"

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"
VENDORED_SCONS="$(mktmpdir scons)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
mkdir -p $VENDORED_NODE  && curl $NODE_PACKAGE -s -o -  | tar xzf - -C $VENDORED_NODE
mkdir -p $VENDORED_NPM   && curl $NPM_PACKAGE -s -o -   | tar xzf - -C $VENDORED_NPM
mkdir -p $VENDORED_SCONS && curl $SCONS_PACKAGE -s -o - | tar xzf - -C $VENDORED_SCONS

# vendor node into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node $NODE_VERSION"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

# setting up paths for building
PATH="$VENDORED_SCONS:$VENDORED_NODE/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"

# unpack existing cache
if [ -d $CACHE_STORE_DIR ]; then

  # generate a place to put node_modules
  TEMP_NODE_MODULES_DIR=$(mktmpdir node_modules)

  # move existing node_modules out of the way
  if [ -d $CACHE_TARGET_DIR ]; then
    mv $CACHE_TARGET_DIR $TEMP_NODE_MODULES_DIR/
  fi

  # copy the cached node_modules in
  mkdir -p $CACHE_TARGET_DIR
  cp -R $CACHE_STORE_DIR/* $CACHE_TARGET_DIR/

  # move existing node_modules back into place
  if [ -d $TEMP_NODE_MODULES_DIR/node_modules ]; then
    cp -R $TEMP_NODE_MODULES_DIR/node_modules/* $CACHE_TARGET_DIR/
  fi

fi

# install dependencies with npm
echo "-----> Installing dependencies with npm $NPM_VERSION"

cd $BUILD_DIR
run_npm install
run_npm rebuild

echo "Dependencies installed" | indent

# repack cache with new assets
if [ -d $CACHE_TARGET_DIR ]; then
  rm -rf $CACHE_STORE_DIR
  mkdir -p $(dirname $CACHE_STORE_DIR)
  cp -a $CACHE_TARGET_DIR $CACHE_STORE_DIR
fi
